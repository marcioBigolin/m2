# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- test
- build
- deploy

sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml


# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Docker.gitlab-ci.yml

# Build a Docker image with CI/CD and push to the GitLab registry.
# Docker-in-Docker documentation: https://docs.gitlab.com/ee/ci/docker/using_docker_build.html
#
# This template uses one generic job with conditional builds
# for the default branch and all other (MR) branches.

docker-build:
  # Use the official docker image.
  image: docker:latest
  stage: build
  only:
    - build
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" docker.io
  # Default branch leaves tag empty (= latest tag)
  # All other branches are tagged with the escaped branch name (commit ref slug)
  script:
    - cp build/Dockerfile .
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker build --pull -t "gtechedu/streamlit${tag}" .
    - docker push "gtechedu/streamlit${tag}"
  # Run this job in a branch where a Dockerfile exists
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - build/Dockerfile

#usando o github para fazer o deploy no streamlit
streamlit-deploy:
  image: enyalius/ci
  stage: deploy
  only: 
    - main
  before_script: 
    # Configura o ssh com as chaves privadas
    - eval "$(ssh-agent -s)"
    - echo "$SSH_GITHUB_KEY" | ssh-add - > /dev/null
    - mkdir -p ~/.ssh/know_hosts
    - ssh-keyscan github.com >>~/.ssh/known_hosts

  script:
    - echo "Connectando ao github"
    - git config --global --add safe.directory /app
    - git config user.name "GTECH auto deploy"
    - git config user.email "gtechedu@ufrgs.br"
    - git remote add github git@github.com:marcioBigolin/my-data-analyser.git
    - git push github HEAD:main

